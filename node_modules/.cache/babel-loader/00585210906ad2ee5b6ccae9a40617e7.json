{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\authentication\\\\authentication\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  // soucasny cas:\n  const currentTime = new Date().getTime(); // takhle dostaneme cas v milisekundach\n  // cas v budoucnu, kdy to ma vyprset:\n\n  const adjExpirationTime = new Date(expirationTime).getTime(); // prevedeme ten expiration na date (dostaneme ho totiz jako nejaky string) a pak z nej zas vytahneme ten Time v ms.\n  // zbyvajici cas:\n\n  const remainingTime = adjExpirationTime - currentTime;\n  return remainingTime;\n};\n\nlet logoutTimer; // nadefinujeme si ho jako global variable.\n\nconst retrieveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\"); // pri spusteni stranky chceme, aby se prohlizel podival do Local Storage, jestli to tam nema ulozene.\n\n  const storedExpirationTime = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationTime);\n\n  if (remainingTime <= 60000) {\n    // 1 min=60000 ms.\n    // kdyz je zbyvajici cas mensi nez 1 minuta. nebo je dokonce zaporny (tzn token vyprsel),\n    // chceme vymazat data z localStorage a nebudeme retrievovat token.\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  } else {\n    // pokud mame dostatek casu pred expiraci:\n    return {\n      token: storedToken,\n      duration: expirationTime\n    };\n  }\n};\n\nconst AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retrieveStoredToken();\n  let initialToken; // variable => undefined.\n\n  if (tokenData) {\n    // pokud mame data, tak se initialToken ulozi na tokenData.token\n    initialToken = tokenData.token;\n  } // protoze pokud jsme nedali logout a jen jsme reloadovali stranku, melo by to tam byt, a my bychom meli zustat prihlaseni. (dokud nedame logout)\n  // tzn. i ten initialToken muze byt ze zacatku undefined (pokud se prihlasujeme a nebyli jsme tedy prihlaseni)\n  // A ANI NEPOTREBUJEME USEEFFECT, PROTOZE LOCAL STORAGE IS SYNCHRONOUS API.\n\n\n  const [token, setToken] = useState(initialToken); // if user has token => he is logged in. and vice versa.\n  //const userIsLoggedIn = token? true : false;\n\n  const userIsLoggedIn = !!token; // js operator. it returns boolean value true/false. tzn jestli token existuje (a zde je to nejaky string), tak nam to hodi true.\n\n  const logoutHandler = () => {\n    setToken(null); // clear token\n\n    localStorage.removeItem(\"token\"); // po logoutovani chceme ten token z Local Storage vymazat\n\n    if (logoutTimer) {\n      // if logout Timer was set => now we want to clear it (when we logout)\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token); // navic pridame i ukladani tokenu do Local Storage prohlizece,\n    // aby kdyz reloadujeme stranku, nebyla nase data ztracena.\n    // local Storage umi storovat jen primitive data - strings, booleans, numbers.. pokud bychom chteli storovat object, museli bychom pouzit json(), abychom ho nejdriv stringifikovali.\n    // zde je ale primo o cislo, tzn lze zapsat takhle:\n    // chceme pridat i auto-logout, aby se automaticky odhlasil po 1 hodine.\n\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logoutHandler, remainingTime); // po remaining time se spusti logoutHandler\n    // test: setTimeout(logoutHandler,5000) => odhlasi nas to po 5 s.\n    // ulozime si i ten expirationTime do local Storage(pozn. musi to byt string, coz nyni je):\n\n    localStorage.setItem(\"expirationTime\", expirationTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration); // if we automatically logged in the user, it should set the timer according the remaining stored time.\n\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\n    }\n  }, [tokenData]);\n  const authContextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/authentication/authentication/01-starting-project/src/store/auth-context.js"],"names":["React","useState","useEffect","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingTime","logoutTimer","retrieveStoredToken","storedToken","localStorage","getItem","storedExpirationTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","logoutHandler","clearTimeout","loginHandler","setItem","setTimeout","console","log","authContextValue","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport const AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  // soucasny cas:\r\n  const currentTime = new Date().getTime(); // takhle dostaneme cas v milisekundach\r\n\r\n  // cas v budoucnu, kdy to ma vyprset:\r\n  const adjExpirationTime = new Date(expirationTime).getTime(); // prevedeme ten expiration na date (dostaneme ho totiz jako nejaky string) a pak z nej zas vytahneme ten Time v ms.\r\n\r\n  // zbyvajici cas:\r\n  const remainingTime = adjExpirationTime - currentTime;\r\n  return remainingTime;\r\n};\r\n\r\nlet logoutTimer; // nadefinujeme si ho jako global variable.\r\nconst retrieveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\"); // pri spusteni stranky chceme, aby se prohlizel podival do Local Storage, jestli to tam nema ulozene.\r\n  const storedExpirationTime = localStorage.getItem(\"expirationTime\");\r\n  const remainingTime = calculateRemainingTime(storedExpirationTime);\r\n  if (remainingTime <= 60000) {\r\n    // 1 min=60000 ms.\r\n    // kdyz je zbyvajici cas mensi nez 1 minuta. nebo je dokonce zaporny (tzn token vyprsel),\r\n    // chceme vymazat data z localStorage a nebudeme retrievovat token.\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  } else {\r\n    // pokud mame dostatek casu pred expiraci:\r\n    return {\r\n      token: storedToken,\r\n      duration: expirationTime,\r\n    };\r\n  }\r\n};\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const tokenData = retrieveStoredToken();\r\n  let initialToken; // variable => undefined.\r\n  if (tokenData) {\r\n    // pokud mame data, tak se initialToken ulozi na tokenData.token\r\n    initialToken = tokenData.token;\r\n  }\r\n\r\n  // protoze pokud jsme nedali logout a jen jsme reloadovali stranku, melo by to tam byt, a my bychom meli zustat prihlaseni. (dokud nedame logout)\r\n  // tzn. i ten initialToken muze byt ze zacatku undefined (pokud se prihlasujeme a nebyli jsme tedy prihlaseni)\r\n  // A ANI NEPOTREBUJEME USEEFFECT, PROTOZE LOCAL STORAGE IS SYNCHRONOUS API.\r\n  const [token, setToken] = useState(initialToken);\r\n  // if user has token => he is logged in. and vice versa.\r\n\r\n  //const userIsLoggedIn = token? true : false;\r\n  const userIsLoggedIn = !!token; // js operator. it returns boolean value true/false. tzn jestli token existuje (a zde je to nejaky string), tak nam to hodi true.\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null); // clear token\r\n    localStorage.removeItem(\"token\"); // po logoutovani chceme ten token z Local Storage vymazat\r\n    if (logoutTimer) {\r\n      // if logout Timer was set => now we want to clear it (when we logout)\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  };\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    // navic pridame i ukladani tokenu do Local Storage prohlizece,\r\n    // aby kdyz reloadujeme stranku, nebyla nase data ztracena.\r\n    // local Storage umi storovat jen primitive data - strings, booleans, numbers.. pokud bychom chteli storovat object, museli bychom pouzit json(), abychom ho nejdriv stringifikovali.\r\n    // zde je ale primo o cislo, tzn lze zapsat takhle:\r\n    // chceme pridat i auto-logout, aby se automaticky odhlasil po 1 hodine.\r\n    localStorage.setItem(\"token\", token);\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n    logoutTimer = setTimeout(logoutHandler, remainingTime); // po remaining time se spusti logoutHandler\r\n    // test: setTimeout(logoutHandler,5000) => odhlasi nas to po 5 s.\r\n    // ulozime si i ten expirationTime do local Storage(pozn. musi to byt string, coz nyni je):\r\n    localStorage.setItem(\"expirationTime\", expirationTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tokenData) {\r\n        console.log(tokenData.duration)\r\n      // if we automatically logged in the user, it should set the timer according the remaining stored time.\r\n      logoutTimer = setTimeout(logoutHandler, tokenData.duration);\r\n    }\r\n  }, [tokenData]);\r\n\r\n  const authContextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}
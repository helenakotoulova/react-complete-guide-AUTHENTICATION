{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\authentication\\\\authentication\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst AuthContextProvider = props => {\n  _s();\n\n  const [token, setToken] = useState(null); // if user has token => he is logged in. and vice versa.\n  //const userIsLoggedIn = token? true : false;\n\n  const userIsLoggedIn = !!token; // js operator. it returns boolean value true/false. tzn jestli token existuje (a zde je to nejaky string), tak nam to hodi true.\n\n  const loginHandler = token => {\n    setToken(token);\n  };\n\n  const logoutHandler = () => {\n    setToken(null); // clear token\n  };\n\n  const authContextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"e+LEOB8XbRIRiSUQHKM4ToWFki4=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/authentication/authentication/01-starting-project/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","AuthContextProvider","props","setToken","userIsLoggedIn","loginHandler","logoutHandler","authContextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AAC7CC,EAAAA,KAAK,EAAE,EADsC;AAE7CC,EAAAA,UAAU,EAAE,KAFiC;AAG7CC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHyB;AAI7CG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJ6B,CAApB,CAApB;;AAOP,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC,CADqC,CAErC;AAEA;;AACA,QAAMU,cAAc,GAAG,CAAC,CAACP,KAAzB,CALqC,CAKL;;AAEhC,QAAMQ,YAAY,GAAIR,KAAD,IAAW;AAC5BM,IAAAA,QAAQ,CAACN,KAAD,CAAR;AACH,GAFD;;AAIA,QAAMS,aAAa,GAAG,MAAM;AAC1BH,IAAAA,QAAQ,CAAC,IAAD,CAAR,CAD0B,CACV;AACjB,GAFD;;AAIA,QAAMI,gBAAgB,GAAG;AACvBV,IAAAA,KAAK,EAAEA,KADgB;AAEvBC,IAAAA,UAAU,EAAEM,cAFW;AAGvBL,IAAAA,KAAK,EAAEM,YAHgB;AAIvBL,IAAAA,MAAM,EAAEM;AAJe,GAAzB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,gBAA7B;AAAA,cACGL,KAAK,CAACM;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3BD;;GAAMP,mB;;KAAAA,mB;AA6BN,eAAeA,mBAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const [token, setToken] = useState(null);\r\n  // if user has token => he is logged in. and vice versa.\r\n\r\n  //const userIsLoggedIn = token? true : false;\r\n  const userIsLoggedIn = !!token; // js operator. it returns boolean value true/false. tzn jestli token existuje (a zde je to nejaky string), tak nam to hodi true.\r\n\r\n  const loginHandler = (token) => {\r\n      setToken(token);\r\n  };\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null); // clear token\r\n  };\r\n\r\n  const authContextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}
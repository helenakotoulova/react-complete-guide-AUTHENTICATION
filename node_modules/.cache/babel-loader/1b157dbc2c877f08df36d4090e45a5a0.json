{"ast":null,"code":"var _jsxFileName = \"D:\\\\Helena\\\\IT\\\\React\\\\ReactKurzComplete\\\\authentication\\\\authentication\\\\01-starting-project\\\\src\\\\store\\\\auth-context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  login: token => {},\n  logout: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  // soucasny cas:\n  const currentTime = new Date().getTime(); // takhle dostaneme cas v milisekundach\n  // cas v budoucnu, kdy to ma vyprset:\n\n  const adjExpirationTime = new Date(expirationTime).getTime(); // prevedeme ten expiration na date (dostaneme ho totiz jako nejaky string) a pak z nej zas vytahneme ten Time v ms.\n  // zbyvajici cas:\n\n  const remainingTime = adjExpirationTime - currentTime;\n  return remainingTime;\n};\n\nconst AuthContextProvider = props => {\n  _s();\n\n  const initialToken = localStorage.getItem(\"token\"); // pri spusteni stranky chceme, aby se prohlizel podival do Local Storage, jestli to tam nema ulozene.\n  // protoze pokud jsme nedali logout a jen jsme reloadovali stranku, melo by to tam byt, a my bychom meli zustat prihlaseni. (dokud nedame logout)\n  // tzn. i ten initialToken muze byt ze zacatku undefined (pokud se prihlasujeme a nebyli jsme tedy prihlaseni)\n  // A ANI NEPOTREBUJEME USEEFFECT, PROTOZE LOCAL STORAGE IS SYNCHRONOUS API.\n\n  const [token, setToken] = useState(initialToken); // if user has token => he is logged in. and vice versa.\n  //const userIsLoggedIn = token? true : false;\n\n  const userIsLoggedIn = !!token; // js operator. it returns boolean value true/false. tzn jestli token existuje (a zde je to nejaky string), tak nam to hodi true.\n\n  const logoutHandler = () => {\n    setToken(null); // clear token\n\n    localStorage.removeItem(\"token\"); // po logoutovani chceme ten token z Local Storage vymazat\n  };\n\n  const loginHandler = (token, expirationTime) => {\n    setToken(token); // navic pridame i ukladani tokenu do Local Storage prohlizece,\n    // aby kdyz reloadujeme stranku, nebyla nase data ztracena.\n    // local Storage umi storovat jen primitive data - strings, booleans, numbers.. pokud bychom chteli storovat object, museli bychom pouzit json(), abychom ho nejdriv stringifikovali.\n    // zde je ale primo o cislo, tzn lze zapsat takhle:\n    // chceme pridat i auto-logout, aby se automaticky odhlasil po 1 hodine.\n\n    localStorage.setItem(\"token\", token);\n    const remainingTime = calculateRemainingTime(expirationTime);\n    setTimeout(logoutHandler, remainingTime); // po remaining time se spusti logoutHandler\n  };\n\n  const authContextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    login: loginHandler,\n    logout: logoutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"s3jk56xWU5XKZXYqw5SfcwTuysU=\");\n\n_c = AuthContextProvider;\nexport default AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["D:/Helena/IT/React/ReactKurzComplete/authentication/authentication/01-starting-project/src/store/auth-context.js"],"names":["React","useState","AuthContext","createContext","token","isLoggedIn","login","logout","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","remainingTime","AuthContextProvider","props","initialToken","localStorage","getItem","setToken","userIsLoggedIn","logoutHandler","removeItem","loginHandler","setItem","setTimeout","authContextValue","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,MAAMC,WAAW,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AAC7CC,EAAAA,KAAK,EAAE,EADsC;AAE7CC,EAAAA,UAAU,EAAE,KAFiC;AAG7CC,EAAAA,KAAK,EAAGF,KAAD,IAAW,CAAE,CAHyB;AAI7CG,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJ6B,CAApB,CAApB;;AAOP,MAAMC,sBAAsB,GAAIC,cAAD,IAAoB;AACjD;AACA,QAAMC,WAAW,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAApB,CAFiD,CAEP;AAE1C;;AACA,QAAMC,iBAAiB,GAAG,IAAIF,IAAJ,CAASF,cAAT,EAAyBG,OAAzB,EAA1B,CALiD,CAKa;AAE9D;;AACA,QAAME,aAAa,GAAGD,iBAAiB,GAAGH,WAA1C;AACA,SAAOI,aAAP;AACD,CAVD;;AAYA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AACrC,QAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAArB,CADqC,CACe;AACpD;AACA;AACA;;AACA,QAAM,CAACf,KAAD,EAAQgB,QAAR,IAAoBnB,QAAQ,CAACgB,YAAD,CAAlC,CALqC,CAMrC;AAEA;;AACA,QAAMI,cAAc,GAAG,CAAC,CAACjB,KAAzB,CATqC,CASL;;AAEhC,QAAMkB,aAAa,GAAG,MAAM;AAC1BF,IAAAA,QAAQ,CAAC,IAAD,CAAR,CAD0B,CACV;;AAChBF,IAAAA,YAAY,CAACK,UAAb,CAAwB,OAAxB,EAF0B,CAEQ;AACnC,GAHD;;AAKA,QAAMC,YAAY,GAAG,CAACpB,KAAD,EAAQK,cAAR,KAA2B;AAC9CW,IAAAA,QAAQ,CAAChB,KAAD,CAAR,CAD8C,CAE9C;AACA;AACA;AACA;AACA;;AACAc,IAAAA,YAAY,CAACO,OAAb,CAAqB,OAArB,EAA8BrB,KAA9B;AACA,UAAMU,aAAa,GAAGN,sBAAsB,CAACC,cAAD,CAA5C;AACAiB,IAAAA,UAAU,CAACJ,aAAD,EAAeR,aAAf,CAAV,CAT8C,CASL;AAC1C,GAVD;;AAYA,QAAMa,gBAAgB,GAAG;AACvBvB,IAAAA,KAAK,EAAEA,KADgB;AAEvBC,IAAAA,UAAU,EAAEgB,cAFW;AAGvBf,IAAAA,KAAK,EAAEkB,YAHgB;AAIvBjB,IAAAA,MAAM,EAAEe;AAJe,GAAzB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEK,gBAA7B;AAAA,cACGX,KAAK,CAACY;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxCD;;GAAMb,mB;;KAAAA,mB;AA0CN,eAAeA,mBAAf","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n});\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  // soucasny cas:\r\n  const currentTime = new Date().getTime(); // takhle dostaneme cas v milisekundach\r\n\r\n  // cas v budoucnu, kdy to ma vyprset:\r\n  const adjExpirationTime = new Date(expirationTime).getTime(); // prevedeme ten expiration na date (dostaneme ho totiz jako nejaky string) a pak z nej zas vytahneme ten Time v ms.\r\n\r\n  // zbyvajici cas:\r\n  const remainingTime = adjExpirationTime - currentTime;\r\n  return remainingTime;\r\n};\r\n\r\nconst AuthContextProvider = (props) => {\r\n  const initialToken = localStorage.getItem(\"token\"); // pri spusteni stranky chceme, aby se prohlizel podival do Local Storage, jestli to tam nema ulozene.\r\n  // protoze pokud jsme nedali logout a jen jsme reloadovali stranku, melo by to tam byt, a my bychom meli zustat prihlaseni. (dokud nedame logout)\r\n  // tzn. i ten initialToken muze byt ze zacatku undefined (pokud se prihlasujeme a nebyli jsme tedy prihlaseni)\r\n  // A ANI NEPOTREBUJEME USEEFFECT, PROTOZE LOCAL STORAGE IS SYNCHRONOUS API.\r\n  const [token, setToken] = useState(initialToken);\r\n  // if user has token => he is logged in. and vice versa.\r\n\r\n  //const userIsLoggedIn = token? true : false;\r\n  const userIsLoggedIn = !!token; // js operator. it returns boolean value true/false. tzn jestli token existuje (a zde je to nejaky string), tak nam to hodi true.\r\n\r\n  const logoutHandler = () => {\r\n    setToken(null); // clear token\r\n    localStorage.removeItem(\"token\"); // po logoutovani chceme ten token z Local Storage vymazat\r\n  };\r\n\r\n  const loginHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    // navic pridame i ukladani tokenu do Local Storage prohlizece,\r\n    // aby kdyz reloadujeme stranku, nebyla nase data ztracena.\r\n    // local Storage umi storovat jen primitive data - strings, booleans, numbers.. pokud bychom chteli storovat object, museli bychom pouzit json(), abychom ho nejdriv stringifikovali.\r\n    // zde je ale primo o cislo, tzn lze zapsat takhle:\r\n    // chceme pridat i auto-logout, aby se automaticky odhlasil po 1 hodine.\r\n    localStorage.setItem(\"token\", token);\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n    setTimeout(logoutHandler,remainingTime); // po remaining time se spusti logoutHandler\r\n  };\r\n\r\n  const authContextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={authContextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContextProvider;\r\n"]},"metadata":{},"sourceType":"module"}